/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package stubs.model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SimpleCard extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5619784041465026338L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SimpleCard\",\"namespace\":\"stubs.model\",\"fields\":[{\"name\":\"date\",\"type\":\"string\",\"doc\":\"The date the card was played\",\"default\":\"\"},{\"name\":\"time\",\"type\":\"string\",\"doc\":\"The time the card was played\",\"default\":\"\"},{\"name\":\"gameId\",\"type\":\"string\",\"doc\":\"The ID of the game\",\"default\":\"\"},{\"name\":\"game\",\"type\":{\"type\":\"enum\",\"name\":\"GameType\",\"symbols\":[\"TexasHoldem\",\"Blackjack\",\"PaiGow\",\"FiveCardDraw\"]},\"doc\":\"The game that the card is used for\",\"default\":\"TexasHoldem\"},{\"name\":\"suit\",\"type\":{\"type\":\"enum\",\"name\":\"CardSuit\",\"symbols\":[\"SPADE\",\"HEART\",\"DIAMOND\",\"CLUB\"]},\"doc\":\"The suit of the card\",\"default\":\"SPADE\"},{\"name\":\"cardValue\",\"type\":\"string\",\"doc\":\"the value of the card\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The date the card was played */
  @Deprecated public java.lang.CharSequence date;
  /** The time the card was played */
  @Deprecated public java.lang.CharSequence time;
  /** The ID of the game */
  @Deprecated public java.lang.CharSequence gameId;
  /** The game that the card is used for */
  @Deprecated public stubs.model.GameType game;
  /** The suit of the card */
  @Deprecated public stubs.model.CardSuit suit;
  /** the value of the card */
  @Deprecated public java.lang.CharSequence cardValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SimpleCard() {}

  /**
   * All-args constructor.
   * @param date The date the card was played
   * @param time The time the card was played
   * @param gameId The ID of the game
   * @param game The game that the card is used for
   * @param suit The suit of the card
   * @param cardValue the value of the card
   */
  public SimpleCard(java.lang.CharSequence date, java.lang.CharSequence time, java.lang.CharSequence gameId, stubs.model.GameType game, stubs.model.CardSuit suit, java.lang.CharSequence cardValue) {
    this.date = date;
    this.time = time;
    this.gameId = gameId;
    this.game = game;
    this.suit = suit;
    this.cardValue = cardValue;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return date;
    case 1: return time;
    case 2: return gameId;
    case 3: return game;
    case 4: return suit;
    case 5: return cardValue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: date = (java.lang.CharSequence)value$; break;
    case 1: time = (java.lang.CharSequence)value$; break;
    case 2: gameId = (java.lang.CharSequence)value$; break;
    case 3: game = (stubs.model.GameType)value$; break;
    case 4: suit = (stubs.model.CardSuit)value$; break;
    case 5: cardValue = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'date' field.
   * @return The date the card was played
   */
  public java.lang.CharSequence getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * The date the card was played
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The time the card was played
   */
  public java.lang.CharSequence getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * The time the card was played
   * @param value the value to set.
   */
  public void setTime(java.lang.CharSequence value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'gameId' field.
   * @return The ID of the game
   */
  public java.lang.CharSequence getGameId() {
    return gameId;
  }

  /**
   * Sets the value of the 'gameId' field.
   * The ID of the game
   * @param value the value to set.
   */
  public void setGameId(java.lang.CharSequence value) {
    this.gameId = value;
  }

  /**
   * Gets the value of the 'game' field.
   * @return The game that the card is used for
   */
  public stubs.model.GameType getGame() {
    return game;
  }

  /**
   * Sets the value of the 'game' field.
   * The game that the card is used for
   * @param value the value to set.
   */
  public void setGame(stubs.model.GameType value) {
    this.game = value;
  }

  /**
   * Gets the value of the 'suit' field.
   * @return The suit of the card
   */
  public stubs.model.CardSuit getSuit() {
    return suit;
  }

  /**
   * Sets the value of the 'suit' field.
   * The suit of the card
   * @param value the value to set.
   */
  public void setSuit(stubs.model.CardSuit value) {
    this.suit = value;
  }

  /**
   * Gets the value of the 'cardValue' field.
   * @return the value of the card
   */
  public java.lang.CharSequence getCardValue() {
    return cardValue;
  }

  /**
   * Sets the value of the 'cardValue' field.
   * the value of the card
   * @param value the value to set.
   */
  public void setCardValue(java.lang.CharSequence value) {
    this.cardValue = value;
  }

  /**
   * Creates a new SimpleCard RecordBuilder.
   * @return A new SimpleCard RecordBuilder
   */
  public static stubs.model.SimpleCard.Builder newBuilder() {
    return new stubs.model.SimpleCard.Builder();
  }

  /**
   * Creates a new SimpleCard RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SimpleCard RecordBuilder
   */
  public static stubs.model.SimpleCard.Builder newBuilder(stubs.model.SimpleCard.Builder other) {
    return new stubs.model.SimpleCard.Builder(other);
  }

  /**
   * Creates a new SimpleCard RecordBuilder by copying an existing SimpleCard instance.
   * @param other The existing instance to copy.
   * @return A new SimpleCard RecordBuilder
   */
  public static stubs.model.SimpleCard.Builder newBuilder(stubs.model.SimpleCard other) {
    return new stubs.model.SimpleCard.Builder(other);
  }

  /**
   * RecordBuilder for SimpleCard instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SimpleCard>
    implements org.apache.avro.data.RecordBuilder<SimpleCard> {

    /** The date the card was played */
    private java.lang.CharSequence date;
    /** The time the card was played */
    private java.lang.CharSequence time;
    /** The ID of the game */
    private java.lang.CharSequence gameId;
    /** The game that the card is used for */
    private stubs.model.GameType game;
    /** The suit of the card */
    private stubs.model.CardSuit suit;
    /** the value of the card */
    private java.lang.CharSequence cardValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(stubs.model.SimpleCard.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gameId)) {
        this.gameId = data().deepCopy(fields()[2].schema(), other.gameId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.game)) {
        this.game = data().deepCopy(fields()[3].schema(), other.game);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.suit)) {
        this.suit = data().deepCopy(fields()[4].schema(), other.suit);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cardValue)) {
        this.cardValue = data().deepCopy(fields()[5].schema(), other.cardValue);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SimpleCard instance
     * @param other The existing instance to copy.
     */
    private Builder(stubs.model.SimpleCard other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gameId)) {
        this.gameId = data().deepCopy(fields()[2].schema(), other.gameId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.game)) {
        this.game = data().deepCopy(fields()[3].schema(), other.game);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.suit)) {
        this.suit = data().deepCopy(fields()[4].schema(), other.suit);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cardValue)) {
        this.cardValue = data().deepCopy(fields()[5].schema(), other.cardValue);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'date' field.
      * The date the card was played
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * The date the card was played
      * @param value The value of 'date'.
      * @return This builder.
      */
    public stubs.model.SimpleCard.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.date = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * The date the card was played
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'date' field.
      * The date the card was played
      * @return This builder.
      */
    public stubs.model.SimpleCard.Builder clearDate() {
      date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * The time the card was played
      * @return The value.
      */
    public java.lang.CharSequence getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * The time the card was played
      * @param value The value of 'time'.
      * @return This builder.
      */
    public stubs.model.SimpleCard.Builder setTime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.time = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * The time the card was played
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'time' field.
      * The time the card was played
      * @return This builder.
      */
    public stubs.model.SimpleCard.Builder clearTime() {
      time = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'gameId' field.
      * The ID of the game
      * @return The value.
      */
    public java.lang.CharSequence getGameId() {
      return gameId;
    }

    /**
      * Sets the value of the 'gameId' field.
      * The ID of the game
      * @param value The value of 'gameId'.
      * @return This builder.
      */
    public stubs.model.SimpleCard.Builder setGameId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.gameId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'gameId' field has been set.
      * The ID of the game
      * @return True if the 'gameId' field has been set, false otherwise.
      */
    public boolean hasGameId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'gameId' field.
      * The ID of the game
      * @return This builder.
      */
    public stubs.model.SimpleCard.Builder clearGameId() {
      gameId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'game' field.
      * The game that the card is used for
      * @return The value.
      */
    public stubs.model.GameType getGame() {
      return game;
    }

    /**
      * Sets the value of the 'game' field.
      * The game that the card is used for
      * @param value The value of 'game'.
      * @return This builder.
      */
    public stubs.model.SimpleCard.Builder setGame(stubs.model.GameType value) {
      validate(fields()[3], value);
      this.game = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'game' field has been set.
      * The game that the card is used for
      * @return True if the 'game' field has been set, false otherwise.
      */
    public boolean hasGame() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'game' field.
      * The game that the card is used for
      * @return This builder.
      */
    public stubs.model.SimpleCard.Builder clearGame() {
      game = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'suit' field.
      * The suit of the card
      * @return The value.
      */
    public stubs.model.CardSuit getSuit() {
      return suit;
    }

    /**
      * Sets the value of the 'suit' field.
      * The suit of the card
      * @param value The value of 'suit'.
      * @return This builder.
      */
    public stubs.model.SimpleCard.Builder setSuit(stubs.model.CardSuit value) {
      validate(fields()[4], value);
      this.suit = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'suit' field has been set.
      * The suit of the card
      * @return True if the 'suit' field has been set, false otherwise.
      */
    public boolean hasSuit() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'suit' field.
      * The suit of the card
      * @return This builder.
      */
    public stubs.model.SimpleCard.Builder clearSuit() {
      suit = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'cardValue' field.
      * the value of the card
      * @return The value.
      */
    public java.lang.CharSequence getCardValue() {
      return cardValue;
    }

    /**
      * Sets the value of the 'cardValue' field.
      * the value of the card
      * @param value The value of 'cardValue'.
      * @return This builder.
      */
    public stubs.model.SimpleCard.Builder setCardValue(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.cardValue = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'cardValue' field has been set.
      * the value of the card
      * @return True if the 'cardValue' field has been set, false otherwise.
      */
    public boolean hasCardValue() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'cardValue' field.
      * the value of the card
      * @return This builder.
      */
    public stubs.model.SimpleCard.Builder clearCardValue() {
      cardValue = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public SimpleCard build() {
      try {
        SimpleCard record = new SimpleCard();
        record.date = fieldSetFlags()[0] ? this.date : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.time = fieldSetFlags()[1] ? this.time : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.gameId = fieldSetFlags()[2] ? this.gameId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.game = fieldSetFlags()[3] ? this.game : (stubs.model.GameType) defaultValue(fields()[3]);
        record.suit = fieldSetFlags()[4] ? this.suit : (stubs.model.CardSuit) defaultValue(fields()[4]);
        record.cardValue = fieldSetFlags()[5] ? this.cardValue : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
